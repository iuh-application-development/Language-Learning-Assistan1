# Generated by Django 5.2 on 2025-05-22 16:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Section",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("position", models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "levels",
                    models.CharField(
                        choices=[
                            ("A1-C1", "A1-C1"),
                            ("A1-B1", "A1-B1"),
                            ("A2-C1", "A2-C1"),
                            ("B1-C2", "B1-C2"),
                            ("A1", "A1"),
                        ],
                        default="A1",
                        max_length=100,
                    ),
                ),
                ("lessons", models.IntegerField(default=0)),
                ("image", models.ImageField(blank=True, null=True, upload_to="image/")),
                ("slug", models.SlugField(blank=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("nickname", models.CharField(blank=True, max_length=255, null=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("join_date", models.DateField(auto_now_add=True)),
                ("first_name", models.CharField(blank=True, max_length=255, null=True)),
                ("last_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("active_days", models.PositiveIntegerField(default=0)),
                ("active_time", models.PositiveIntegerField(default=0)),
                ("last_active_date", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SubTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("A1", "A1"),
                            ("A2", "A2"),
                            ("B1", "B1"),
                            ("B2", "B2"),
                            ("C1", "C1"),
                        ],
                        default="A1",
                        max_length=50,
                    ),
                ),
                ("num_part", models.IntegerField(default=0)),
                ("slug", models.SlugField(blank=True, unique=True)),
                ("full_textkey", models.TextField(blank=True)),
                ("full_audioSrc", models.URLField()),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subtopics",
                        to="dolphin.section",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="topics",
                        to="dolphin.topic",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AudioExercise",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("audioSrc", models.URLField()),
                ("correct_text", models.TextField()),
                ("position", models.PositiveIntegerField(default=1)),
                ("timeStart", models.FloatField(blank=True, null=True)),
                ("timeEnd", models.FloatField(blank=True, null=True)),
                (
                    "subtopic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exercises",
                        to="dolphin.subtopic",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="section",
            name="topic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sections",
                to="dolphin.topic",
            ),
        ),
        migrations.CreateModel(
            name="UserProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("exercise_position", models.PositiveIntegerField(default=1)),
                ("is_completed", models.BooleanField(default=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "exercise",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_progress",
                        to="dolphin.audioexercise",
                    ),
                ),
                (
                    "subtopic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="dolphin.subtopic",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "subtopic")},
            },
        ),
    ]
